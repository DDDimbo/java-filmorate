CREATE TABLE IF NOT EXISTS mpa
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(40) NOT NULL,
    description VARCHAR(200) NOT NULL,
    duration INTEGER NOT NULL,
    release_date DATE NOT NULL,
    mpa_id INTEGER REFERENCES mpa (id) ON DELETE CASCADE,
    CONSTRAINT constr_description CHECK description <> '',
    CONSTRAINT constr_name CHECK name <> ''
);


CREATE TABLE IF NOT EXISTS users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(40) NOT NULL,
    email VARCHAR(40) UNIQUE NOT NULL,
    login VARCHAR(40) UNIQUE NOT NULL,
    birthday DATE NOT NULL
);


CREATE TABLE IF NOT EXISTS likes
(
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (FILM_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS genres
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS friends_status
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS friends
(
    user1_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    user2_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    fs_status_id INTEGER REFERENCES friends_status (id) ON DELETE CASCADE,
    PRIMARY KEY (USER1_ID, USER2_ID)
);















